Харківський національний університет радіоелектроніки
Факультет комп'ютерних наук
Кафедра програмної інженерії
ЗВІТ
з дисципліни "Аналіз та рефакторинг коду"
до лабораторної роботи №1
на тему: "Розробка Vision & Scope"





Виконав ст. гр. ПЗПІ-22-2 
Д’яченнко Микита Олександрович

Ст. викл. кафедри ПІ 
Сокорчук Ігор Петрович









Харків 2024 
1.	МЕТА
Метою роботи є розроблення ефективної бази даних для серверної частини програмної системи, а також створення прикладного програмного інтерфейсу (API) для аналізу та моніторингу витрат часу. Це забезпечить централізоване зберігання даних, зручний доступ до інформації та можливість інтеграції з іншими системами, що сприятиме покращенню управління часом та підвищенню продуктивності.

2.	ХІД РОБОТИ
Виконання лабораторної роботи розпочалося з побудови ER-діаграми, що відображає основну структуру даних системи. ER-діаграма розміщена у додатку А. Після цього було створено схему бази даних для збереження інформації користувачів, завдань і звітів.
Для збереження структурованих даних було обрано реляційну базу даних PostgreSQL. Основними причинами вибору є:
	Надійність: PostgreSQL є однією з найбільш стабільних і безпечних СУБД із відкритим вихідним кодом.
	Гнучкість: Підтримує складні транзакції, що важливо для системи, яка працює з конфіденційними даними.
	Широкий функціонал: Інструменти для розширеної аналітики та підтримка JSON, що забезпечує додаткову гнучкість у роботі з даними.
Схема бази даних наведена у додатку Б. Далі було створено функції для підключення до PostgreSQL із застосунку, написаного на Node.js.

UML-діаграми
Після створення базових функціональних компонентів було розроблено UML-діаграми прецедентів для серверної частини. Для зручності і уникнення надмірної складності діаграми було поділено на дві частини:
	Дії з базою даних, що включають збереження, оновлення та видалення записів.
	Дії системи з обробки інформації від IoT-пристроїв, таких як смарт-годинники та фітнес-браслети.
Обидві діаграми наведені у додатку В.

Розробка API
На основі специфікації було розроблено REST API для забезпечення інтеграції серверної частини з клієнтськими додатками. API включає наступні функції:
	CRUD-операції для управління даними користувачів і завдань.
	Прийом даних з IoT-пристроїв для автоматичного обліку активності.

Архітектура системи
Система має багаторівневу архітектуру, яка складається з наступних компонентів:
	Клієнтська частина: мобільний та веб-додатки, що надсилають запити до серверної складової.
	Серверна частина: обробляє запити клієнтів та взаємодіє з базою даних через REST API.
	СУБД PostgreSQL: забезпечує збереження та обробку структурованих даних.
Взаємодія між компонентами реалізована через RESTful API, що дозволяє легко інтегрувати систему з іншими додатками або пристроями IoT.

Використані технології:
	Node.js: використовується для серверної частини, забезпечуючи швидкодію і масштабованість.
	Express.js: дозволяє швидко налаштовувати маршрути для HTTP-запитів.
	PostgreSQL: основна СУБД для збереження даних.
	Docker: забезпечує ізоляцію і простоту розгортання системи.

Тестування
Розроблене API було протестоване за допомогою Postman. Усі основні функції працюють стабільно, що підтверджує правильність реалізації серверної частини.

Повний код проекту наведено у GitHub, посилання на який можна знайти у додатку Г. Відеодемонстрація роботи системи доступна у додатку Д.
 
Додаток А
ER-діаграма
 
Рис. 1 – er-діаграма бази даних
 
Додаток Б
Схема бази даних
 
Рис. 2 – схема бази даних
 
Додаток В
UML-діаграми
 
Рис. 3 – UML-діаграма користувача 
Рис. 4 - UML-діаграма серверу
 
Додаток Г
Посилання на GitHub репозиторій: 
https://github.com/NureDiachenkoMykyta/arkpz-pzpi-22-2-diachenko-mykyta/tree/main/Task2
 
Додаток Д
Посилання на YouTube відео:
https://youtu.be/5bvszw6QczM
